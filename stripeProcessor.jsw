import stripe from 'stripe';
//import {getSecret} from 'wix-secrets-backend';
import wixSecretsBackend from 'wix-secrets-backend';
import wixData from 'wix-data';


let subscriptionCheck = [];
let subscriptionData = [];

//---------------------------------------------Create Customer---------------------------------------------//

export async function createCustomer(token, emailId, apiKeySk,agentName) {
      //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Customer Creation", apiKeySk, emailId
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;
                            } );

       //--end log process--//

    let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);

	return await key.customers.create({
		email: emailId,
		source: token,
    name:agentName
	})
	.then( function(err, customer) {
		if (err) {
			return Promise.resolve(err); //does not work
		}
			return Promise.resolve(customer);
	})
	.catch( (err) => {
		return err;
	});
}



//--------------------------------------------------Create Order-----------------------------------------------//

export async function createOrder(cus, items, apiKeySk){
  //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Create Order", apiKeySk, cus
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;
                            } );

       //--end log process--//

    let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);

const order = await key.orders.create({
  currency: 'usd',
  line_items: items,
  payment: {settings: {payment_method_types: ['card']}},
  customer: cus
});

return order

/*

		return key.orders.pay(order.id, {
				customer: cus
			}, (err, order) => {
					if (err || !order) {
						return(err);
					}
				return Promise.resolve(order);	
		})
		
		*/

}

export async function payOrder(orderId, cus, apiKeySk){

    let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);

	return await key.orders.pay(
	orderId, {customer: cus}
	)
	.then( function(err, order) {
		if (err) {
			return Promise.resolve(err); //does not work
		}
			return Promise.resolve(order);
	})
	.catch( (err) => {
		return err;
	})


}

export async function finalizeOrder(orderId, total, apiKeySk){

    let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);

		return await key.orders.submit(
	orderId, {expected_total: total}
	)
	.then( function(err, order) {
		if (err) {
			return Promise.resolve(err); //does not work
		}
			return Promise.resolve(order);
	})
	.catch( (err) => {
		return err;
	})

}

export function createMethod(token){
      //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Create Method", 
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;
                            } );

       //--end log process--//

	return stripe.paymentMethods.create({
  type: 'card',
  card: {token},
})
.then( function(err, method) {
		if (err) {
			return Promise.resolve(err); //does not work
		}
			return Promise.resolve(method);
	})
	.catch( (err) => {
		return err;
	})



}

export async function retrieveMethod(cus, apiKeySk){

  /*
      //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Retrieve Payment Methods", cus, apiKeySk
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;
                            } );

       //--end log process--//

       */


    let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);

    const paymentMethods = await key.customers.listPaymentMethods(
  cus,
  {type: 'card'}
);

	return await key.customers.listPaymentMethods(cus,
  {type: 'card'})
	
}

export async function retrieveSubscription(cus,apiKeySk){

   let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);

    var subscriptions = await key.subscriptions.list({customer: cus, limit: 10})

  
      //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Retrieve Subscription", cus, apiKeySk, subscriptions
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;


                                   //--log process--//
                                      let logResults = {
                                          "type": "Stripe Log",
                                          "log": "Retrieve Subscription Error", cus, errorMsg
                                        };

                                        wixData.insert("devLog", logResults)
                                        .then( (results) => {
                                          let item = results; //see item below
                                          
                                        } )
                                       

                                  //--end log process--//
                            } );

       //--end log process--//

//cancelled let stripeSub = await stripe.subscriptions.list({customer: customerId, status: "canceled"});
 


	return await key.subscriptions.list({customer: cus, limit: 10})
	
}
export async function cancelSubscription(sub,apiKeySk){
  let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);

     var cancelSubscription = await key.subscriptions.cancel(sub).catch( (err) => {
		return err;
	});

     return cancelSubscription

  
      //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Cancel Subscription", sub, apiKeySk
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;


                                   //--log process--//
                                      let logResults = {
                                          "type": "Stripe Log",
                                          "log": "Cancel Subscription Error", sub, errorMsg
                                        };

                                        wixData.insert("devLog", logResults)
                                        .then( (results) => {
                                          let item = results; //see item below
                                          
                                        } )
                                       

                                  //--end log process--//
                            } );

       //--end log process--//

       return await key.subscriptions.cancel(sub).then( function(err, subscription) {
		if (err) {
			return Promise.resolve(err); //does not work
		}
			return Promise.resolve(subscription);
	})
	.catch( (err) => {
		return err;
	});

}

export async function getStripeSubscription(cus,subscription,apiKeySk){

   let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);

    return await key.subscriptions.retrieve(subscription)

    /*

    var subscription = await key.subscriptions.retrieve(subscription);

  
      //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Retrieve Subscription", cus, subscription
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;


                                   //--log process--//
                                      let logResults = {
                                          "type": "Stripe Log",
                                          "log": "Retrieve Invoices Error", cus, errorMsg
                                        };

                                        wixData.insert("devLog", logResults)
                                        .then( (results) => {
                                          let item = results; //see item below
                                          
                                        } )
                                       

                                  //--end log process--//
                            } );

       //--end log process--//

	return await key.subscriptions.retrieve(subscription).then( function(err, subscription) {
		if (err) {
			return Promise.resolve(err); //does not work
		}
			return Promise.resolve(subscription);
	})
	.catch( (err) => {
		return err;
	});
*/
	
}
export async function retrieveInvoices(cus,apiKeySk){

   let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);

    var subscriptions = await key.invoices.list({customer: cus, limit: 10})

  
      //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Retrieve Invoices", cus, apiKeySk, subscriptions
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;


                                   //--log process--//
                                      let logResults = {
                                          "type": "Stripe Log",
                                          "log": "Retrieve Invoices Error", cus, errorMsg
                                        };

                                        wixData.insert("devLog", logResults)
                                        .then( (results) => {
                                          let item = results; //see item below
                                          
                                        } )
                                       

                                  //--end log process--//
                            } );

       //--end log process--//

//cancelled let stripeSub = await stripe.subscriptions.list({customer: customerId, status: "canceled"});
 


	return await key.invoices.list({customer: cus, limit: 10})
	
}

export async function payIntentComplete(intentId, cardId, apiKeySk){
      //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Payment Intent", apiKeySk
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;
                            } );

       //--end log process--//

    let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);

	return await key.paymentIntents.confirm(intentId,
  {payment_method: cardId}
)
.then( function(err, intent) {
		if (err) {
			return Promise.resolve(err); //does not work
		}
			return Promise.resolve(intent);
	})
	.catch( (err) => {
		return err;
	})
	
}


//---------------------------------------------Create Subscription---------------------------------------------//

export async function createSubscription(cus, plan, apiKeySk) {
       //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Subscription Creation", apiKeySk, cus, plan
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;
                            } );

       //--end log process--//


    let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);
     

	return await key.subscriptions.create({
		customer: cus,
		items: plan
	})
	.then( function(err, subscription) {
		if (err) {
			return Promise.resolve(err); //does not work
		}
			return Promise.resolve(subscription);
	})
	.catch( (err) => {
		return err;
	});
}

export async function createSubscriptionNewMethod(cus, plan, apiKeySk,method) {
       //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Subscription Creation", apiKeySk, cus, plan
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;
                            } );

       //--end log process--//


    let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);
     

	return await key.subscriptions.create({
		customer: cus,
		items: plan,
    default_payment_method: method,
    default_source: method
	})
	.then( function(err, subscription) {
		if (err) {
			return Promise.resolve(err); //does not work
		}
			return Promise.resolve(subscription);
	})
	.catch( (err) => {
		return err;
	});
}

export async function createSubscriptionwInvoiceItems(cus, items, apiKeySk) {

    let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);

	//let subscription = "price_1LBhr9JK0SbxJv9ljx0VLrCZ";
	return await key.subscriptions.create({
		customer: cus,
		items: items,
		add_invoice_items: items
	})
	.then( function(err, subscription) {
		if (err) {
			return Promise.resolve(err); //does not work
		}
			return Promise.resolve(subscription);
	})
	.catch( (err) => {
		return err;
	});
}

export async function createMultipleSubscriptions(cus, items, apiKeySk, method) {

    let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);

	//let subscription = "price_1LBhr9JK0SbxJv9ljx0VLrCZ";
	return await key.subscriptions.create({
		customer: cus,
		items: items,
    default_payment_method: method,
    default_source: method
	})
	.then( function(err, subscription) {
		if (err) {
			return Promise.resolve(err); //does not work
		}
			return Promise.resolve(subscription);
	})
	.catch( (err) => {
		return err;
	});
}

export async function getAPIKey(apiKeyType) {
  return wixSecretsBackend.getSecret(apiKeyType)
    .then((secret) => {
         //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Success", apiKeyType
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;
                            } );

       //--end log process--//
      return secret
    })
    .catch((error) => {
      console.error(error);
       //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Error", apiKeyType, error
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;
                            } );

       //--end log process--//
      return error
    });
}

//---------------------------------------------Update Card---------------------------------------------//

export async function updateCard(token, apiKeySk, cus) {
      //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Update Card", apiKeySk, cus
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;
                            } );

       //--end log process--//

    let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);

	return await key.customers.createSource(
		cus,
    {
    source: token,
    }
	)
	.then( function(err, customer) {
		if (err) {
			return Promise.resolve(err); //does not work
		}
			return Promise.resolve(customer);
	})
	.catch( (err) => {
		return err;
	});
}

//---------------------------------------------Update Customer---------------------------------------------//

export async function updateCustomer(id, apiKeySk, cus) {
      //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Update Customer", apiKeySk, cus
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;
                            } );

       //--end log process--//

    let apiKey = await getAPIKey(apiKeySk);
    const key = require("stripe")(apiKey);

	return await key.customers.update(
		cus,
    {
    default_source: id,
    }
	)
	.then( function(err, customer) {
		if (err) {
			return Promise.resolve(err); //does not work
		}
			return Promise.resolve(customer);
	})
	.catch( (err) => {
		return err;
	});
}


export async function addStripeSubscriptions(){

  let allBoostSubscriptions = [];
  let allGoogleSubscriptions = [];
  let allEssentialSubscriptions = [];
  let allSubscriptionOptions = [];

            wixData.query("stripeSubscriptions")    
                    .contains("title", "Boost")
                    .or(
                          wixData.query("stripeSubscriptions")
                          .contains("title", "Essential")
                            ) 
                          .or(
                          wixData.query("stripeSubscriptions")
                          .contains("title", "Google")
                            )     
                    .find() 
                    .then((results) => {

					        	let totalSusbcriptions = results.items[0].apiId;
                    let allSubscriptions = results.items
                    //let totalSusbcriptionsLength = totalSusbcriptions.length;
                    let totalSusbcriptionsLength = allSubscriptionOptions.length;
                    let count = 0;

                    allSubscriptions.forEach(subscription => {


                      if(subscription.title.includes("BOOST")){

                      allBoostSubscriptions.push(subscription.apiId);
                      allSubscriptionOptions.push(subscription.apiId);

                      } else if(subscription.title.includes("Essential")){

                        allEssentialSubscriptions.push(subscription.apiId);
                        allSubscriptionOptions.push(subscription.apiId);

                      } else if(subscription.title.includes("Google")){

                        allGoogleSubscriptions.push(subscription.apiId);
                        allSubscriptionOptions.push(subscription.apiId);
                        
                      }
                      

                        
                        queryAgents(allBoostSubscriptions, allGoogleSubscriptions, allEssentialSubscriptions)

                         //--log process--//
                          let logResults = {
                              "type": "Find Remove Permissions Log",
                              "log": "Log Stripe Subscriptions", allBoostSubscriptions, allEssentialSubscriptions, allGoogleSubscriptions
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;
                            } );

                         //--end log process--//

                      
                      
                    });

                    })

}

export async function findRemovePermissions(allBoostSubscriptions, allGoogleSubscriptions, allEssentialSubscriptions){


  let findmatchEssential = subscriptionData.find(item=> item.price === activeSubscription)
	let findmatchGoogle = subscriptionData.find(item=> item.price === activeSubscription)
	let findmatchBoost = subscriptionData.find(item=> item.price === activeSubscription)
 
  

//------BEGIN FUNCTION------//


  
      //--log process--//
                          let logResults = {
                              "type": "Stripe Log",
                              "log": "Retrieve Active Subscriptions", findSubscriptions
                            };

                            wixData.insert("devLog", logResults)
                            .then( (results) => {
                              let item = results; //see item below
                              
                            } )
                            .catch( (err) => {
                              let errorMsg = err;


                                   //--log process--//
                                      let logResults = {
                                          "type": "Stripe Log",
                                          "log": "Retrieve Invoices Error"
                                        };

                                        wixData.insert("devLog", logResults)
                                        .then( (results) => {
                                          let item = results; //see item below
                                          
                                        } )
                                       

                                  //--end log process--//
                            } );

       //--end log process--//


}

export function getStripeSubscriptions(cus, subscription, apiKeySk){

  retrieveSubscription(cus, apiKeySk)
			.then( (subscriptions) => {
				
					console.log("Stripe Subscriptions:", subscriptions);
					let allItems = subscriptions.data

					if(allItems.length == undefined || allItems.length < 1){
						//no subscriptions
					}

					

			
			let totalSubscriptionAmount = 0;
			
			allItems.forEach(subscription => {

				//Billing Update 021624 0149
				console.log("Billing Update")
				

				if (subscription.plan == null){ //--if cancelled && subscription greater than yesterday--//


                    let jointItems = subscription.items.data; //price_xx matches stripeSubscriptions database for multi-purchased items
					

                    jointItems.forEach(jointSubscription => {

                    let planId = jointSubscription.plan.id;
					console.log("Joint Subscription Plan ID", planId) //--HERE--//
					
					totalSubscriptionAmount = totalSubscriptionAmount + jointSubscription.plan.amount
					let jointstatus = jointSubscription.status; //active or canceled
          let cancelDate = (new Date(jointSubscription.cancel_at*1000)); // date
					let jointprice = "$" + ((jointSubscription.plan.amount) / 100).toString();
					let jointinterval = jointSubscription.plan.interval; //month or year

					console.log("Joint Subscription Plan ID + Data", planId, jointprice, jointinterval) //--HERE--//

					wixData.query('stripeSubscriptions').eq('apiId', planId).find().then((planResults) => {

						console.log(
							"Results: ", planResults
						)

						var planName = planResults.items[0].title

			

						let newSubscription = {
								"_id": uniqueId(),
								"planId": jointSubscription.plan.id,
								"status": jointSubscription.status,
								"price": "$" + ((jointSubscription.plan.amount) / 100).toString(),
								"interval": jointSubscription.plan.interval,
								"subscription": jointSubscription.subscription,
								"planName": planName

								}

								subscriptionData.push(newSubscription);
								subscriptionCheck.push(jointSubscription.plan.id);
								console.log("Subscription Check: ", subscriptionCheck)

								
								
								
								console.log("Subscription Data:", subscriptionData)
								





					})


					})

				}

				if (subscription.plan !== null){

					console.log ("Single Subscription Plans")



				totalSubscriptionAmount = totalSubscriptionAmount + subscription.plan.amount

				//query card type
				
				let planId = subscription.plan.id; //price_xx matches stripeSubscriptions database
				let status = subscription.status; //active
        let cancelDate = (new Date(subscription.cancel_at*1000));
				let price = "$" + ((subscription.plan.amount) / 100).toString();
				let interval = subscription.plan.interval; //month or year

				wixData.query('stripeSubscriptions').eq('apiId', planId).find().then((planResults) => {

									console.log(
										"Results: ", planResults
									)

									var planName = planResults.items[0].title

						

						let newSubscription = {
											"_id": uniqueId(),
											"planId": subscription.plan.id,
											"status": subscription.status,
											"price": "$" + ((subscription.plan.amount) / 100).toString(),
											"interval": subscription.plan.interval,
											"subscription": subscription.id,
											"planName": planName

											}

											subscriptionData.push(newSubscription);
											subscriptionCheck.push(subscription.plan.id)
											console.log("Subscription Check: ", subscriptionCheck)


											
											
											console.log("Subscription Data:", subscriptionData)

											


				})

			}

				
				})		
					
					
			});


}

function uniqueId() {

    // desired length of Id
    var idStrLen = 32;
   
    var idStr = (Math.floor((Math.random() * 25)) + 10).toString(36) + "-";
    
    idStr += (new Date()).getTime().toString(36) + "-";
    
    do {
        idStr += (Math.floor((Math.random() * 35))).toString(36);
    } while (idStr.length < idStrLen);

    return (idStr);
}

function formatDate (date) {
		var d = new Date(date),
        month = date.toLocaleString('default', { month: 'long' }),
        day = ' ' + d.getDate(),
        year = " " + d.getFullYear();

    
    if (day.length < 2) day = '0' + day;
	let thisDate = month + " " + day + "," + year;

    return thisDate
}

export function queryAgents(allBoostSubscriptions, allGoogleSubscriptions, allEssentialSubscriptions){

  let apiKeySk

//-------set below for live or test Stripe----//

let stripeMode = "test";   //value is "test" or "live"

if(stripeMode == "test"){

    apiKeySk = "stripeTestSk";


} else if(stripeMode == "live"){

    apiKeySk = "stripeLiveSk";

}


      wixData.query('Team')
      .find().then((res) => {

        
      let agents = res.items;  
      let itemId = res.items[0]._id
      
      let databaseSubscriptions = res.items[0].subscriptionId;

                                    //--log process--//
                                      let logResults = {
                                          "type": "Subscription Check",
                                          "log": "All Agents"
                                        };

                                        wixData.insert("devLog", res)
                                        .then( (results) => {
                                          let item = results; //see item below
                                          
                                        } )
                                       

                                  //--end log process--//

          agents.forEach(agent => {

                    let agentSubscriptions = agent.subscriptionId;
                    let cus = agent.customerId;

                    agentSubscriptions.forEach(subscription => {


                        checkAllSubscriptions(subscription, cus, apiKeySk, allBoostSubscriptions, allGoogleSubscriptions, allEssentialSubscriptions)

                      
                    });

            
          });

    })



}

export async function checkAllSubscriptions(subscription, cus, apiKeySk, allBoostSubscriptions, allGoogleSubscriptions, allEssentialSubscriptions){

            let findmatchEssential = subscriptionData.find(item=> item.price === activeSubscription)
            let findmatchGoogle = subscriptionData.find(item=> item.price === activeSubscription)
            let findmatchBoost = subscriptionData.find(item=> item.price === activeSubscription)


		await getStripeSubscription(cus,subscription,apiKeySk).then( (subscriptions) => {
				
					
					let retrievedData = subscriptions;
					
					let status = subscriptions.status; //active or canceled
					console.log("Stripe Subscription Data Retrieved:", retrievedData);
					

					let cancelDate = (new Date(subscriptions.canceled_at*1000)); //subscription cancel date
					let today = new Date();
					let cancellationRange = new Date(today.setDate(today.getDate() - 15)); // reset the cancellation range in Days
					//Note: This range can be set to find a period of cancellations to search and remove memberships for all cancellations

					if (cancelDate.getTime() < cancellationRange.setHours(0,0,0,0) && status == "canceled") {
						let formattedDate = formatDate(cancellationRange);
						console.log("Canceled Plan: ", formattedDate)

						//remove the plan
						//kick the member

						if(subscriptions?.items?.data?.length > 1){
							console.log("Multiple Subscriptions: ", subscriptions.items.data)
							let plans = subscriptions.items.data;
							console.log("Combo Subscriptions: ", plans)

								plans.forEach(item => {
									let planId = item.plan.id;
									console.log("Combo Subscription: ", planId)
									//find match and remove member from appropriate membership plan
									//remove subscription from member's agents database
									
								});



								} else {
							let plan = subscriptions.plan.id;
							console.log("Plan: ", plan)
							//find match and remove member from appropriate membership plan
							//remove subscription from member's agents database
								
								}
					}

			})

}