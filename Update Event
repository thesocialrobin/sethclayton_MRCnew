import wixData from 'wix-data';
import wixUsers from 'wix-users';
import { triggeredEmails } from 'wix-crm';
import { createEvent, deleteEvent, updateEvent } from "backend/eventbrite";
import wixWindow from 'wix-window';
import { eventUpdateEmail } from "backend/email";
import {googleAddress, googleAddressDetails} from 'backend/getData.jsw';
import { connectAbstractApi, convertAbstractApi } from 'backend/getData.jsw';
const { DateTime } = require("luxon");

let eventAddress
let placeId
let abstractDate
let startDateString
let endDateString
let startDateStringAbstract
let endDateStringAbstract
let eventDate


$w.onReady(async function () {
    var user = wixUsers.currentUser
    var agentEmail = await user.getEmail()
    var agentId = user.id
    var itemData = wixWindow.lightbox.getContext()
    initForm(agentEmail, agentId, itemData)
    
});

async function initForm(agentEmail, agentId, itemData) {
    console.log(itemData);
    
    placeId = itemData.placeId;
    console.log("Loaded Address: ", eventAddress, itemData.address, placeId)
    getGoogleMapData(placeId);
    //$w('#type').value = itemData.type
    $w('#eventName').value = itemData.eventName
    $w('#datePicker1').value = itemData.date
    $w('#startTime').value = itemData.startTime
    $w('#endTime').value = itemData.endTime
    //$w('#venueName').value = itemData.venueName

    /*
    if ($w('#type').value === 'In-Person Event') {
        $w('#link').hide()
        $w('#link').value = ''
        $w('#address').value = itemData.address.formatted
        $w('#address').show()
    } else {
        $w('#link').show()
        $w('#address').hide()
        $w('#address').value = null
        $w('#link').value = itemData.link
        $w('#venueName').disable()
    }
    */

    /*
    $w('#type').onChange(() => {
        if ($w('#type').value === 'In-Person Event') {
            $w('#link').hide()
            $w('#link').value = ''
            $w('#address').show()
            $w('#venueName').enable()
            $w('#venueName').value = ''
            $w('#venueName').resetValidityIndication()
        } else {
            $w('#link').show()
            $w('#address').hide()
            $w('#address').value = null
            $w('#venueName').value = 'Virtual Event'
            $w('#venueName').disable()
        }
    })
    */

    var eventTypes = await wixData.query('EventTypes').find().then((res) => {
        var items = res.items
        var dropdownOptions = []
        items.forEach(element => {
            dropdownOptions.push({ 'label': element.title, 'value': element.title })
        });
        $w('#eventName').options = dropdownOptions
        return items
    })

    $w('#datePicker1').onChange(() => {
        var startDate = new Date($w('#datePicker1').value)
        var startTime = $w('#startTime').value
        var startHour = parseInt(startTime.substr(0, 2))
        var startMin = parseInt(startTime.substr(3, 2))
        startDate.setHours(startHour, startMin)

        var endDate = new Date($w('#datePicker1').value)
        var endTime = $w('#endTime').value
        var endHour = parseInt(endTime.substr(0, 2))
        var endMin = parseInt(endTime.substr(3, 2))
        endDate.setHours(endHour, endMin)
    })

    $w('#submit').onClick(() => {
        console.log('clicked');
        $w('#submit').disable();
         $w('#message').hide();
         $w('#loading').show();

        var startDate = new Date()
        var startTime = $w('#startTime').value
        var startHour = parseInt(startTime.substr(0, 2))
        var startMin = parseInt(startTime.substr(3, 2))

        startDate.setHours(startHour, startMin)

        var endDate = new Date()
        var endTime = $w('#endTime').value
        var endHour = parseInt(endTime.substr(0, 2))
        var endMin = parseInt(endTime.substr(3, 2))

        endDate.setHours(endHour, endMin)

        if (startDate >= endDate) {
            $w('#message').text = 'Start time can not be greater than the end time'
            $w('#message').show()
            setTimeout(() => {
                $w('#message').hide()
            }, 5000);
        } else if ($w('#datePicker1').valid && $w('#startTime').valid && $w('#endTime').valid && $w('#eventName').valid) {
            $w('#loading').show()
            console.log(eventTypes);
            var selectedEvent = {}

            eventTypes.forEach(element => {
                if (element.title === $w('#eventName').value) {
                    selectedEvent = element
                }
            });

            console.log(selectedEvent);

            var date = {
                'year': $w('#datePicker1').value.getFullYear(),
                'month': $w('#datePicker1').value.getMonth(),
                'date': $w('#datePicker1').value.getDate(),
            }

            var toEmail = {
                'title': 'Event Updated',
                'type': itemData.type,
                'date': $w('#datePicker1').value,
                'startTime': $w('#startTime').value,
                'endTime': $w('#endTime').value,
                'eventName': $w('#eventName').value,
                'description': selectedEvent.description,
                'link': itemData.link,
                'agentEmail': agentEmail
            }

            var toUpdateEvent

            if (itemData.type === 'In-Person Event') {

                toUpdateEvent = {
                    '_id': itemData._id,
                    'type': itemData.type,
                    'date': date,
                    'startTime': $w('#startTime').value,
                    'endTime': $w('#endTime').value,
                    'eventName': $w('#eventName').value,
                    'description': selectedEvent.description,
                    'link': itemData.link,
                    'address_1': eventAddress.streetAddress.number + " " + eventAddress.streetAddress.name,
                    'city': eventAddress.city,
                    'country': eventAddress.country,
                    'postal_code': eventAddress.postalCode,
                    'latitude': eventAddress.location.latitude,
                    'longitude': eventAddress.location.longitude,
                    'agentEmail': agentEmail,
                    'agentId': agentId,
                    'eventImage': getFullImageURL(selectedEvent.image),
                    'eventbriteId': itemData.eventbriteId,
                    'venueName': itemData.venueName,
                    'summary': selectedEvent.summary
                }

                toEmail.address = eventAddress.formatted

            } else {

                toUpdateEvent = {
                    '_id': itemData._id,
                    'type': itemData.type,
                    'date': date,
                    'startTime': $w('#startTime').value,
                    'endTime': $w('#endTime').value,
                    'eventName': $w('#eventName').value,
                    'description': selectedEvent.description,
                    'link': itemData.link,
                    'agentEmail': agentEmail,
                    'agentId': agentId,
                    'eventImage': getFullImageURL(selectedEvent.image),
                    'eventbriteId': itemData.eventbriteId,
                    'venueName': itemData.venueName,
                    'summary': selectedEvent.summary
                }

                toEmail.address = 'Virtual Event'
            }

            var toUpdate = {
                '_id': itemData._id,
                'type': itemData.type,
                'date': $w('#datePicker1').value,
                'startTime': $w('#startTime').value,
                'endTime': $w('#endTime').value,
                'eventName': $w('#eventName').value,
                'description': selectedEvent.description,
                'link': itemData.link,
                'address': eventAddress,
                'placeId': placeId,
                'agentEmail': agentEmail,
                'agentId': agentId,
                'eventImage': getFullImageURL(selectedEvent.image),
                'eventbriteId': itemData.eventbriteId,
                'venueName': itemData.venueName,
                'summary': itemData.summary
            }

            console.log(toUpdate);

            updateEvent(toUpdateEvent, startDateString, endDateString).then((res) => {

                        //--log process--//
                          let logResults2 = {
                              "type": "Eventbrite API",
                              "log": "Success updating event", res
                            };

                            wixData.insert("devLog", logResults2, )
                            .then( (results) => {
                              let item = results; 
                              
                            } )

                     //--end log process--//

                console.log(res);
                var eventbriteLink = res.eventUrl
                var eventbriteId = res.eventId
                toUpdate.eventbriteId = eventbriteId
                toUpdate.eventbriteLink = eventbriteLink
                toEmail.eventbriteLink = eventbriteLink
                toUpdate.facebookShareLink = 'https://www.facebook.com/sharer/sharer.php?u=' + eventbriteLink
                toUpdate.twitterShareLink = 'https://twitter.com/intent/tweet?url=' + eventbriteLink
                toUpdate.linkedinShareLink = 'https://www.linkedin.com/sharing/share-offsite/?url=' + eventbriteLink

                wixData.update('Events', toUpdate).then(() => {
                    $w('#loading').hide()
                    $w('#message').text = 'Event Updated'
                    $w('#message').show()
                    eventUpdateEmail(toEmail).then((res2) => {
                        console.log(res2);
                        //$w('#type').value = null
                        //$w('#type').resetValidityIndication()
                        $w('#datePicker1').value = null
                        $w('#datePicker1').resetValidityIndication()
                        $w('#startTime').value = null
                        $w('#startTime').resetValidityIndication()
                        $w('#endTime').value = null
                        $w('#endTime').resetValidityIndication()
                        $w('#eventName').value = null
                        $w('#eventName').resetValidityIndication()
                        //$w('#link').value = null
                        //$w('#link').resetValidityIndication()
                        //$w('#address').value = null
                        //$w('#address').resetValidityIndication()
                    }).then(() => {
                        wixWindow.lightbox.close()
                        setTimeout(function () {
                            $w('#message').hide();
                            $w('#loading').hide();
                        }, 7000)
                    }).catch((err) => {
                        console.log(err);
                        $w('#submit').enable();
                        $w('#message').text = 'Error Updating Event'
                        $w('#message').show()
                        $w('#loading').hide();
                    })

                })
            })

        } else {
            console.log('inputs invalid');
        }
    })
}

export function getFullImageURL(imageSRC) {
    let strReturnImage = "";
    if (imageSRC.startsWith("wix:image:")) {
        let wixImageURL = "";
        wixImageURL = "https://static.wixstatic.com/media/";
        let wixLocalURL = "";
        wixLocalURL = imageSRC.replace('wix:image://v1/', '');
        wixLocalURL = wixLocalURL.substr(0, wixLocalURL.lastIndexOf('/'));
        strReturnImage = wixImageURL + wixLocalURL;
    } else {
        strReturnImage = imageSRC;
    }
    return strReturnImage;
}

export function closeLightbox_click(event) {
	wixWindow.lightbox.close
}



function uniqueId() {

    // desired length of Id
    var idStrLen = 32;
   
    var idStr = (Math.floor((Math.random() * 25)) + 10).toString(36) + "-";
    
    idStr += (new Date()).getTime().toString(36) + "-";
    
    do {
        idStr += (Math.floor((Math.random() * 35))).toString(36);
    } while (idStr.length < idStrLen);

    return (idStr);
}

/*
export function address_input(event) {

	 googleAddress($w('#address').value)
        .then((res) => {
           
 let googleAddressOptions = res.predictions; 
 let allOptions = []; 

            googleAddressOptions.forEach(function (option) {
                
 let optionData = { "_id": uniqueId(), "address": option.description, "place_id": option.place_id };
                allOptions.push(optionData);
            });
            
            $w("#addressOptions").data = []; 
            if(res.length > 5){
                $w("#addressOptions").data = allOptions.slice(0,5); 
                $w("#addressOptions").expand(); 
            } else {
                 $w("#addressOptions").data = allOptions
                 $w("#addressOptions").expand(); 
            }
            

        })
}
*/

/*
export function addressOptions_itemReady($item, itemData, index) {

	$item("#addressFulfilled").text = itemData.address;

    $item("#addressFulfilled").onClick((event) => {
        
        $w('#address').value = $item("#addressFulfilled").text
        $w('#addressOptions').collapse()

        googleAddressDetails(itemData.place_id)
        .then((googleDetails) => {
            console.log("Google Details: ", googleDetails)
            
            const map = {
                street_number: 'streetNumber',
                route: 'streetName',
                locality: 'city',
                administrative_area_level_1: 'state',
                postal_code: 'postalCode',
                country: 'country'
            };
            const createAddress = {};
            googleDetails.result.address_components.forEach(component => {
                createAddress[map[component.types[0]]] = component.long_name;
               
            })   
            
            createAddress.longitude = googleDetails.result.geometry.location.lng;
            createAddress.latitude = googleDetails.result.geometry.location.lat;
            createAddress.formatted_address = googleDetails.result.formatted_address;

            console.log("New Address Data: ", createAddress);

            eventAddress = { 
                formatted: createAddress.formatted_address, 
                location: 
                    { "latitude": createAddress.latitude, "longitude": createAddress.longitude }, 
                streetAddress: 
                    { name: createAddress.streetName, number: createAddress.streetNumber }, city: createAddress.city, subdivision: createAddress.state, country: createAddress.country, postalCode: createAddress.postalCode }

            console.log("Event Address Data: ", eventAddress);

            
            })
    });
}
*/

export function getGoogleMapData(placeId){

    googleAddressDetails(placeId)
        .then((googleDetails) => {
            console.log("Google Details: ", googleDetails)
            
            const map = {
                street_number: 'streetNumber',
                route: 'streetName',
                locality: 'city',
                administrative_area_level_1: 'state',
                postal_code: 'postalCode',
                country: 'country'
            };
            const createAddress = {};
            googleDetails.result.address_components.forEach(component => {
                createAddress[map[component.types[0]]] = component.long_name;
               
            })   
            
            createAddress.longitude = googleDetails.result.geometry.location.lng;
            createAddress.latitude = googleDetails.result.geometry.location.lat;
            createAddress.formatted_address = googleDetails.result.formatted_address;

            console.log("New Address Data: ", createAddress);

            eventAddress = { 
                formatted: createAddress.formatted_address, 
                location: 
                    { "latitude": createAddress.latitude, "longitude": createAddress.longitude }, 
                streetAddress: 
                    { name: createAddress.streetName, number: createAddress.streetNumber }, city: createAddress.city, subdivision: createAddress.state, country: createAddress.country, postalCode: createAddress.postalCode }

            console.log("Event Address Data: ", eventAddress);

            
            })

}

export async function getTime() {

    var startTime = abstractDate.startTime;
    var startHour = parseInt(startTime.substr(0, 2))
    var startMin = parseInt(startTime.substr(3, 2))
    console.log("Get Time Date 1 Abstract: ", startTime, startHour, startMin, abstractDate)

    var endTime = abstractDate.endTime
    var endHour = parseInt(endTime.substr(0, 2))
    var endMin = parseInt(endTime.substr(3, 2))
    console.log("Get Time Date 2 Abstract: ", endTime, endHour, endMin, abstractDate)

    //Note - takes calendar date from selected value and not from converted value

    var startDatev2 = await DateTime.fromObject({ year: abstractDate.year, month: abstractDate.month, day: eventDate.date, hour: startHour, minute: startMin })
    var endDatev2 = await DateTime.fromObject({ year: abstractDate.year, month: abstractDate.month, day: eventDate.date, hour: endHour, minute: endMin })
    console.log("Get Time Date 3 Abstract: ", startDatev2, endDatev2, abstractDate)

    startDateString = startDatev2.toISO().split('.')[0] + "Z"
    endDateString = endDatev2.toISO().split('.')[0] + "Z"

    console.log("Get Time Date Abstract: ", startDateString, endDateString)

}

export async function runAbstractApiAndCalculateTimes() {

    let eventBriteCity = "New York";
    let eventBriteState = "NY";
    let convertLocation = "Reykjavik, Iceland";

    let startingLocation = `${eventBriteCity}, ${eventBriteState}`; // Ensure 'city' and 'state' are correctly defined

    var startTime = $w('#startTime').value
    var startHour = parseInt(startTime.substr(0, 2))
    var startMin = parseInt(startTime.substr(3, 2))
    console.log("Get Time Date 1: ", startTime, startHour, startMin, eventDate)

    var endTime = $w('#endTime').value
    var endHour = parseInt(endTime.substr(0, 2))
    var endMin = parseInt(endTime.substr(3, 2))
    console.log("Get Time Date 2: ", endTime, endHour, endMin, eventDate)

    var startDatev2 = await DateTime.fromObject({ year: eventDate.year, month: eventDate.month, day: eventDate.date, hour: startHour, minute: startMin })
    var endDatev2 = await DateTime.fromObject({ year: eventDate.year, month: eventDate.month, day: eventDate.date, hour: endHour, minute: endMin })
    console.log("Get Time Date 3: ", startDatev2, endDatev2, eventDate)

    startDateString = startDatev2.toISO().split('.')[0] + "Z"
    endDateString = endDatev2.toISO().split('.')[0] + "Z"

    console.log("Get Time Date: ", startDateString, endDateString)

    startDateStringAbstract = startDatev2.toISO().split('.')[0]
    endDateStringAbstract = endDatev2.toISO().split('.')[0]

    try {

        let startTimeResult = await convertAbstractApi(startingLocation, startDateStringAbstract, convertLocation);
        let endTimeResult = await convertAbstractApi(startingLocation, endDateStringAbstract, convertLocation);

        console.log("Time Results: ", startTimeResult, endTimeResult, startTimeResult.target_location.datetime, endTimeResult.target_location.datetime);

        if (Object.keys(startTimeResult).length === 0) {
            console.error("Abstract API Start Result Not Found");
            return null; // Return null if no time zone information is found
        }

        if (Object.keys(endTimeResult).length === 0) {
            console.error("Abstract API End Result Not Found");
            return null; // Return null if no time zone information is found
        }

        return {
            startTimeResult: startTimeResult.target_location.datetime,
            endTimeResult: endTimeResult.target_location.datetime
        };
    } catch (error) {
        console.error("Error in runAbstractApiAndCalculateTimes:", error);
        return null; // Return null in case of an error
    }
}


export function startTime_change(event) {
	console.log("Time: ", $w('#startTime').value);
    addHour($w('#startTime').value)
    if ($w('#startTime').valid && $w('#endTime').valid && $w('#datePicker1').valid) {
        var date = {
            'year': $w('#datePicker1').value.getFullYear(),
            'month': $w('#datePicker1').value.getMonth(),
            'date': $w('#datePicker1').value.getDate(),
        }

        eventDate = {
            'year': $w('#datePicker1').value.getFullYear(),
            'month': Number($w('#datePicker1').value.getMonth()) + 1,
            'date': $w('#datePicker1').value.getDate(),
        }

        console.log("Data Date: ", date, eventDate)

        //getTime(date);
        runAbstractApiAndCalculateTimes().then((results) => {

            let eventStartTime = results.startTimeResult;
            let eventEndTime = results.endTimeResult;
            abstractDate = {
                startTime: eventStartTime.split(' ')[1],
                endTime: eventEndTime.split(' ')[1],
                date: eventStartTime.split(' ')[0]
            }

            console.log("Abstract API Return Start: ", eventStartTime, eventEndTime, abstractDate);

            getTime()

        })
    }
}

export function endTime_change(event) {
	var startDate = new Date()
    var startTime = $w('#startTime').value
    var startHour = parseInt(startTime.substr(0, 2))
    var startMin = parseInt(startTime.substr(3, 2))

    startDate.setHours(startHour, startMin)

    var endDate = new Date()
    var endTime = $w('#endTime').value
    var endHour = parseInt(endTime.substr(0, 2))
    var endMin = parseInt(endTime.substr(3, 2))

    endDate.setHours(endHour, endMin)

    if (startDate >= endDate) {
        $w('#message').text = 'Start time can not be greater than the end time'
        $w('#message').expand()
        $w('#submit').disable()
    } else {
        $w('#message').collapse()
        $w('#submit').enable()
    }

    if ($w('#startTime').valid && $w('#endTime').valid && $w('#datePicker1').valid) {
        var date = {
            'year': $w('#datePicker1').value.getFullYear(),
            'month': $w('#datePicker1').value.getMonth(), //Zero index based Function, must add 1
            'date': $w('#datePicker1').value.getDate(),
        }

        eventDate = {
            'year': $w('#datePicker1').value.getFullYear(),
            'month': Number($w('#datePicker1').value.getMonth()) + 1,
            'date': $w('#datePicker1').value.getDate(),
        }

        console.log("Data Date: ", date, eventDate)

        runAbstractApiAndCalculateTimes().then((results) => {

            let eventStartTime = results.startTimeResult;
            let eventEndTime = results.endTimeResult;
            abstractDate = {
                startTime: eventStartTime.split(' ')[1],
                endTime: eventEndTime.split(' ')[1],
                date: eventStartTime.split(' ')[0]
            }

            console.log("Abstract API Return End: ", eventStartTime, eventEndTime, abstractDate);

            getTime()

        })
    }
}

export function addHour(time) {

    let timeSplitter = time.split(":");
    let hour = Number(timeSplitter[0]);
    let sumMinutes = Number(timeSplitter[1]) + 60;
    let additionalHours = Math.floor(sumMinutes / 60);
    let newHour = ((additionalHours + hour) % 24).toString();
    let newMinutes = (sumMinutes % 60).toString();
    let formattedTime = newHour.padStart(2, '0') + ":" + newMinutes.padStart(2, '0') + ":00.000";
    console.log("Formatted Time: ", formattedTime)

    var startDate = new Date()
    var startTime = $w('#startTime').value
    var startHour = parseInt(startTime.substr(0, 2))
    var startMin = parseInt(startTime.substr(3, 2))

    startDate.setHours(startHour, startMin)

    var endDate = new Date()
    var endTime = $w('#endTime').value
    var endHour = parseInt(endTime.substr(0, 2))
    var endMin = parseInt(endTime.substr(3, 2))

    endDate.setHours(endHour, endMin)

    if (startDate >= endDate) {
        $w('#message').text = 'Start time can not be greater than the end time'
        $w('#message').expand()
        $w('#submit').disable()
    } else {
        $w('#message').collapse()
        $w('#submit').enable()
    }

    return formattedTime;

}