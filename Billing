import wixUsers from 'wix-users';
import wixData from 'wix-data';
import wixLocation from 'wix-location';
import {session} from 'wix-storage';
import wixWindow from 'wix-window';
import {stripeToken} from 'public/stripe.js';
import { retrieveMethod, retrieveSubscription,retrieveInvoices,cancelSubscription } from 'backend/stripeProcessor.jsw';
import { currentMember } from 'wix-members';

let apiKeyPk
let apiKeySk
let count
let newInvoiceItems = null;
newInvoiceItems = [];
let allItems = [];
let invoiceData = [];
let subscriptionCheck = [];
let memberId
let roleIds = [];
let toCancel = [];
let cus

var email 
var planId

$w.onReady(async function () {
console.log("030124.0145")
const member = await currentMember.getMember()

if (member) {
		memberId = member._id;
		console.log("Member Found", memberId)

		currentMember.getRoles()
			.then((roles) => {
				
				roles.forEach(role => {

					roleIds.push(role._id)

					console.log("Roles: ", roleIds)
					
				});
				
				
			})
			.catch((error) => {
				console.error(error);
			});
} 



//-------set below for live or test Stripe----//

let stripeMode = "test";   //value is "test" or "live"

if(stripeMode == "test"){

    apiKeyPk = "stripeTestPk";
    apiKeySk = "stripeTestSk";


} else if(stripeMode == "live"){

    apiKeyPk = "stripeLivePk";
    apiKeySk = "stripeLiveSk";

}

//--------------------end--------------------//
	
	email = await wixUsers.currentUser.getEmail();

	wixData.query('Team').eq('email', email).find().then((res) => {
        var itemId = res.items[0]._id
        session.setItem("id", itemId)
        session.setItem("userName", res.items[0].name)
		session.setItem("subscriptionStatus", res.items[0].subscriptionStatus)
		session.setItem("cus", res.items[0].customerId)

		cus = res.items[0].customerId;
		console.log("Customer", cus)

	
	retrieveMethods();

	retrieveInvoices(cus,apiKeySk)
	.then( (invoices) => {
				
					
					allItems = invoices.data
					let totalPages = Number(allItems.length);
					console.log("Stripe Invoices:", invoices, totalPages);
					let invoicePaginationTotal = 8;
					let countedTotal = 0;

					

					let agentInvoices = $w("#agentInvoices");
					$w("#agentInvoices").data = [];

					allItems.forEach(invoice => {

						countedTotal++
						

						let subscriptionInvoiceData = invoice.lines.data;
						console.log("Invoice Data: ", subscriptionInvoiceData, subscriptionInvoiceData.length)
						
						let subscriptionId = invoice.lines.data[0].price.id;

						

						let invoicePdf = invoice.invoice_pdf;
						let amount = "$" + (invoice.total / 100).toString() + " USD";
						let date = formatDate(new Date(invoice.effective_at*1000));
						console.log("Date: ", date)

						if(subscriptionId){

							wixData.query('stripeSubscriptions').eq('apiId', subscriptionId).find().then((planResults) => {

									console.log(
										"Results: ", planResults
									)

									var planName = planResults.items[0].title

						

										let newInvoice = {
											"_id": uniqueId(),
											"planName": planName,
											"length": subscriptionInvoiceData.length,
											"invoicePdf": invoice.invoice_pdf,
											"amount": "$" + (invoice.total / 100).toString() + " USD",
											"date": date

											}

											invoiceData.push(newInvoice);

											console.log("This Invoice Data: ", invoiceData, newInvoice)

											$w("#agentInvoices").data = invoiceData;
											$w("#agentInvoices").expand()
									

									


							})

						} else {
							//await Seth's feedback
						}

						const finishedCount = () => {

							if (count == 8 || totalPages == count) {
								

													$w("#agentInvoices").data = invoiceData;
													$w("#agentInvoices").expand()
											

							}

						}

						console.log("Counted Total", countedTotal, totalPages)

						agentInvoices.onItemReady(($item, itemData) => {

							$item('#invoicePrice').text = itemData.amount;

							if(itemData.length > 1){

								console.log(
									"Subscription Invoice Data: ", subscriptionInvoiceData
								)

								$item('#subscriptionName').text = itemData.planName + " + More ";
			
							} else {

								$item('#subscriptionName').text = itemData.planName;

							}
							
							$item('#invoiceDate').text = itemData.date;
							
							$item('#download').link = itemData.invoicePdf;

							if(totalPages > 1){
								
								$w('#totalPages').text =  "of " + totalPages.toString();

								if(count !== totalPages){
									let getNearestEight = roundEight(count);
									$w('#pageSeries').text = "1" + "-" + getNearestEight.toString();
								} 

								if (totalPages > 8){
									$w('#goForward').expand()
									$w('#goBack').expand()

								}

							} else if( totalPages < 2){
								$w('#pageSeries').text = "1" 
								$w('#totalPages').text =  "of " + totalPages.toString();


							}

							


							})


						

						if (countedTotal == totalPages) {

							count = 0;
							var length = invoiceData.length;

							console.log("Start Count", invoiceData, count, length, Array.isArray(invoiceData))
							

                        if (invoiceData[count] !== undefined && count <= invoicePaginationTotal) {
                            newInvoiceItems.push(invoiceData[count])
                            console.log("Current Count 1: ", count)
                            count++
                        }

                        if (invoiceData[count] !== undefined && count <= invoicePaginationTotal) {
                            newInvoiceItems.push(invoiceData[count])
                            console.log("Current Count 2: ", count)
                            count++
                        }

                        if (invoiceData[count] !== undefined && count <= invoicePaginationTotal) {
                            newInvoiceItems.push(invoiceData[count])
                            console.log("Current Count 3: ", count)
                            count++
                            console.log("Current Count of 3: ", count)
                        }

						if (invoiceData[count] !== undefined && count <= invoicePaginationTotal) {
                            newInvoiceItems.push(invoiceData[count])
                            console.log("Current Count 4: ", count)
                            count++
                            console.log("Current Count of 4: ", count)
                        }

						if (invoiceData[count] !== undefined && count <= invoicePaginationTotal) {
                            newInvoiceItems.push(invoiceData[count])
                            console.log("Current Count 5: ", count)
                            count++
                            console.log("Current Count of 5: ", count)
                        }

						if (invoiceData[count] !== undefined && count <= invoicePaginationTotal) {
                            newInvoiceItems.push(invoiceData[count])
                            console.log("Current Count 6: ", count)
                            count++
                            console.log("Current Count of 6: ", count)
                        }

						if (invoiceData[count] !== undefined && count <= invoicePaginationTotal) {
                            newInvoiceItems.push(invoiceData[count])
                            console.log("Current Count 7: ", count)
                            count++
                            console.log("Current Count of 7: ", count)
                        }

						if (invoiceData[count] !== undefined && count <= invoicePaginationTotal) {
                            newInvoiceItems.push(invoiceData[count])
                            console.log("Current Count 8: ", count)
                            count++
                            console.log("Current Count of 8: ", count)
                        }

						}

						finishedCount();

						

					})


	})

	

	retrieveSubscription(cus, apiKeySk)
			.then( (subscriptions) => {
				
					console.log("Stripe Subscriptions:", subscriptions);
					let allItems = subscriptions.data

					if(allItems.length == undefined || allItems.length < 1){
						$w("#box488").collapse()
					}

					let subscriptionData = [];
					let listItems = [];

					let agentSubscriptions = $w("#agentSubscription");
					let susbcriptionsList = $w("#subscriptionsList");
					$w("#agentSubscription").data = [];
			
			let totalSubscriptionAmount = 0;
			
			allItems.forEach(subscription => {

				//Billing Update 021624 0149
				console.log("Billing Update")
				

				if (subscription.plan == null){


                    let jointItems = subscription.items.data; //price_xx matches stripeSubscriptions database for multi-purchased items
					

                    jointItems.forEach(jointSubscription => {

                    let planId = jointSubscription.plan.id;
					console.log("Joint Subscription Plan ID", planId) //--HERE--//
					
					totalSubscriptionAmount = totalSubscriptionAmount + jointSubscription.plan.amount
					let jointstatus = jointSubscription.status; //active
					let jointprice = "$" + ((jointSubscription.plan.amount) / 100).toString();
					let jointinterval = jointSubscription.plan.interval; //month or year

					console.log("Joint Subscription Plan ID + Data", planId, jointprice, jointinterval) //--HERE--//

					wixData.query('stripeSubscriptions').eq('apiId', planId).find().then((planResults) => {

						console.log(
							"Results: ", planResults
						)

						var planLogoImage = planResults.items[0].logo
						var planName = planResults.items[0].title

			

						let newSubscription = {
								"_id": uniqueId(),
								"planId": jointSubscription.plan.id,
								"status": jointSubscription.status,
								"price": "$" + ((jointSubscription.plan.amount) / 100).toString(),
								"interval": jointSubscription.plan.interval,
								"subscription": jointSubscription.subscription,
								"planName": planName,
								"planLogoImage": planLogoImage

								}

								subscriptionData.push(newSubscription);
								listItems.push(newSubscription);
								subscriptionCheck.push(jointSubscription.plan.id);
								console.log("Subscription Check: ", subscriptionCheck)

								$w("#agentSubscription").data = subscriptionData;
								$w("#agentSubscription").expand();

								
								let firstData = {
									"_id": "0001",
								"planId": "blank",
								"price": "SUBTOTAL",

								}
								
								
								console.log("Subscription Data:", subscriptionData)
								
								let findmatch = listItems.find(item=> item._id === "0001")
											
								if(findmatch){
									console.log("First Data Already Pushed")
									$w("#subscriptionsList").data = [];
									$w("#subscriptionsList").data = listItems;
									$w("#subscriptionsBox").expand();
									
									console.log("List Items:", listItems)
								} else {
									console.log("First Data Pushed")
									listItems.unshift(firstData);
									$w("#subscriptionsList").data = [];
									$w("#subscriptionsList").data = listItems;
									$w("#subscriptionsBox").expand();
									console.log("List Items:", listItems)
								}


						agentSubscriptions.onItemReady(($item, itemData) => {


							/*
							$item("#cancelSubscription").onClick(() => {
								console.log("Prep Subscriptions")
								session.setItem("stripePurpose", "Cancel");
								
								//toCancel.push(itemData.subscription);
								let findMatch = subscriptionData.find(item=> item.subscription === itemData.subscription)
								let preventDuplicates = toCancel.find(item=> item.planId === itemData.planId)
								let totalSubscriptions = subscriptionData.length;
								
								let count = 0;
								console.log("Update: ", totalSubscriptions, count)

								subscriptionData.forEach(subscription => {
									console.log("Subscription Data All: ", subscriptionData)
									count++

									console.log("Update: ", totalSubscriptions, count)
									if(findMatch && !preventDuplicates){
										toCancel.push(subscription);
										console.log("Matched Subscription: ", subscription.subscription, subscription.planName, subscription.price)
									} else {

										console.log("Not Matched: ",subscription.subscription, subscription.planName, subscription.price)		

										}

										console.log("ThisSubscription: ", itemData.subscription)
									
									if(totalSubscriptions == count){
										wixWindow.openLightbox('Payment', toCancel)
									.then((data) => {

										let receivedData = data;

										console.log("Data Received: ", receivedData)

											getSubscriptions();

										
									});


									}
									

									
									
								});
								
								
							}) //here
							*/

						$item('#price').text = itemData.price;
						$item('#interval').text = "/" + itemData.interval
						
							$item('#planName').text = itemData.planName;

						

						if(itemData.planLogoImage != undefined){

							$item('#subscriptionImage').src = itemData.planLogoImage;
							$item('#subscriptionImage').expand()

						}


						})

						susbcriptionsList.onItemReady(($item, itemData) => {

							console.log("List Items On Ready:", listItems)

						$item('#listPrice').text = itemData.price;
						
						

						$w('#totalSubscriptionAmount').text = "$" + ((totalSubscriptionAmount) / 100).toString();

						console.log("PLAN NAME: ", itemData.planId)

						if(itemData.price == "SUBTOTAL"){
							$item('#subscriptionPlanName').text = "ITEMS";
						} else if(itemData.price !== "SUBTOTAL"){
							
							$item('#subscriptionPlanName').text = itemData.planName;

						}


						})



					})


					})

				}

				if (subscription.plan !== null){

					console.log ("Single Subscription Plans")



				totalSubscriptionAmount = totalSubscriptionAmount + subscription.plan.amount

				//query card type
				
				let planId = subscription.plan.id; //price_xx matches stripeSubscriptions database
				let status = subscription.status; //active
				let price = "$" + ((subscription.plan.amount) / 100).toString();
				let interval = subscription.plan.interval; //month or year

				wixData.query('stripeSubscriptions').eq('apiId', planId).find().then((planResults) => {

									console.log(
										"Results: ", planResults
									)

									var planLogoImage = planResults.items[0].logo
									var planName = planResults.items[0].title

						

						let newSubscription = {
											"_id": uniqueId(),
											"planId": subscription.plan.id,
											"status": subscription.status,
											"price": "$" + ((subscription.plan.amount) / 100).toString(),
											"interval": subscription.plan.interval,
											"subscription": subscription.id,
											"planName": planName,
											"planLogoImage": planLogoImage

											}

											subscriptionData.push(newSubscription);
											listItems.push(newSubscription);
											subscriptionCheck.push(subscription.plan.id)
											console.log("Subscription Check: ", subscriptionCheck)

											$w("#agentSubscription").data = subscriptionData;
											$w("#agentSubscription").expand();



											
											let firstData = {
												"_id": "0001",
											"planId": "blank",
											"price": "SUBTOTAL",

											}
											
											
											console.log("Subscription Data:", subscriptionData)

											let findmatch = listItems.find(item=> item._id === "0001")

											if(findmatch){
											 console.log("First Data Already Pushed")
											 $w("#subscriptionsList").data = [];
											 $w("#subscriptionsList").data = listItems;
											 $w("#subscriptionsBox").expand();
											console.log("List Items:", listItems)

											} else {
												console.log("First Data Pushed")
												listItems.unshift(firstData);
												$w("#subscriptionsList").data = [];
											$w("#subscriptionsList").data = listItems;
											$w("#subscriptionsBox").expand();
											console.log("List Items:", listItems)
											}
											
											
									

									agentSubscriptions.onItemReady(($item, itemData) => {

									$item('#price').text = itemData.price;
									$item('#interval').text = "/" + itemData.interval
									
										$item('#planName').text = itemData.planName;

									

									if(itemData.planLogoImage != undefined){

										$item('#subscriptionImage').src = itemData.planLogoImage;
										$item('#subscriptionImage').expand()

									}


									})

									susbcriptionsList.onItemReady(($item, itemData) => {

										console.log("List Items On Ready:", listItems)

									$item('#listPrice').text = itemData.price;
									
									
									
									$w('#totalSubscriptionAmount').text = "$" + ((totalSubscriptionAmount) / 100).toString();

									console.log("PLAN NAME: ", itemData.planId)

									if(itemData.price == "SUBTOTAL"){
										$item('#subscriptionPlanName').text = "ITEMS";
									} else if(itemData.price !== "SUBTOTAL"){
										
										$item('#subscriptionPlanName').text = itemData.planName;

									}


									})


				})

			}

				
				})		
					
					
			});


    })

});

export function getRoles(){
 return	currentMember.getRoles()
  .then((roles) => {
    return roles;
  })
  .catch((error) => {
    console.error(error);
  });
}


function unixCode (){ 
  var timeStamp = Math.floor(Date.now()/1000);
  return timeStamp.toString(); 
}

function formatDate (date) {
		var d = new Date(date),
        month = date.toLocaleString('default', { month: 'long' }),
        day = ' ' + d.getDate(),
        year = " " + d.getFullYear();

    
    if (day.length < 2) day = '0' + day;
	let thisDate = month + " " + day + "," + year;

    return thisDate
}

export function roundEight(number){
    return Math.round(number / 8) * 8;
}

export function goForward_click(event) {
	let direction = "forward"
	loadMoreFunction(direction)
}

export function loadMoreFunction(direction){
	session.setItem("Clicked", "Start")
	console.log("Current Count Forward: ", count)

	let allItems = newInvoiceItems.length

	if (newInvoiceItems !== undefined && newInvoiceItems !== "") {
		
		console.log("Data: ", newInvoiceItems, count)
        let newItems = [];
		

		if (newInvoiceItems[count] !== undefined && count < allItems) {
            console.log("Added: ", newInvoiceItems[count])
            newItems.push(newInvoiceItems[count])
            if (direction == "backward"){
				count--
			} else if (direction == "forward"){
				count++
			}
            console.log("Count", allItems)
            session.setItem("Clicked", "Pending")
        }

		if (newInvoiceItems[count] !== undefined && count < allItems) {
            console.log("Added: ", newInvoiceItems[count])
            newItems.push(newInvoiceItems[count])
            if (direction == "backward"){
				count--
			} else if (direction == "forward"){
				count++
			}
            console.log("Count", allItems)
            session.setItem("Clicked", "Pending")
        }

		if (newInvoiceItems[count] !== undefined && count < allItems) {
            console.log("Added: ", newInvoiceItems[count])
            newItems.push(newInvoiceItems[count])
            if (direction == "backward"){
				count--
			} else if (direction == "forward"){
				count++
			}
            console.log("Count", allItems)
            session.setItem("Clicked", "Pending")
        }

		if (newInvoiceItems[count] !== undefined && count < allItems) {
            console.log("Added: ", newInvoiceItems[count])
            newItems.push(newInvoiceItems[count])
            if (direction == "backward"){
				count--
			} else if (direction == "forward"){
				count++
			}
            console.log("Count", allItems)
            session.setItem("Clicked", "Pending")
        }

		if (newInvoiceItems[count] !== undefined && count < allItems) {
            console.log("Added: ", newInvoiceItems[count])
            newItems.push(newInvoiceItems[count])
            count++
            console.log("Count", allItems)
            session.setItem("Clicked", "Pending")
        }

		if (newInvoiceItems[count] !== undefined && count < allItems) {
            console.log("Added: ", newInvoiceItems[count])
            newItems.push(newInvoiceItems[count])
            if (direction == "backward"){
				count--
			} else if (direction == "forward"){
				count++
			}
            console.log("Count", allItems)
            session.setItem("Clicked", "Pending")
        }

		if (newInvoiceItems[count] !== undefined && count < allItems) {
            console.log("Added: ", newInvoiceItems[count])
            newItems.push(newInvoiceItems[count])
            if (direction == "backward"){
				count--
			} else if (direction == "forward"){
				count++
			}
            console.log("Count", allItems)
            session.setItem("Clicked", "Pending")
        }

		if (newInvoiceItems[count] !== undefined && count < allItems) {
            console.log("Added: ", newInvoiceItems[count])
            newItems.push(newInvoiceItems[count])
            if (direction == "backward"){
				count--
			} else if (direction == "forward"){
				count++
			}
            console.log("Count", allItems)
            session.setItem("Clicked", "Pending")
        }

		newItems.reverse()

		let getStatus = session.getItem("Clicked")

		if ($w('#agentInvoices').data.length < 8 || (count == allItems && getStatus == "Start")) { 

			console.log("Start With 0")

			count = 0
			let thisTotal = 8

			if (newInvoiceItems[count] !== undefined && count <= thisTotal) {
                console.log("Added Restart: ", newInvoiceItems[count])
                newItems.push(newInvoiceItems[count])
                count++
            }
			if (newInvoiceItems[count] !== undefined && count <= thisTotal) {
                console.log("Added Restart: ", newInvoiceItems[count])
                newItems.push(newInvoiceItems[count])
                count++
            }
			if (newInvoiceItems[count] !== undefined && count <= thisTotal) {
                console.log("Added Restart: ", newInvoiceItems[count])
                newItems.push(newInvoiceItems[count])
                count++
            }
			if (newInvoiceItems[count] !== undefined && count <= thisTotal) {
                console.log("Added Restart: ", newInvoiceItems[count])
                newItems.push(newInvoiceItems[count])
                count++
            }
			if (newInvoiceItems[count] !== undefined && count <= thisTotal) {
                console.log("Added Restart: ", newInvoiceItems[count])
                newItems.push(newInvoiceItems[count])
                count++
            }
			if (newInvoiceItems[count] !== undefined && count <= thisTotal) {
                console.log("Added Restart: ", newInvoiceItems[count])
                newItems.push(newInvoiceItems[count])
                count++
            }
			if (newInvoiceItems[count] !== undefined && count <= thisTotal) {
                console.log("Added Restart: ", newInvoiceItems[count])
                newItems.push(newInvoiceItems[count])
                count++
            }
			if (newInvoiceItems[count] !== undefined && count <= thisTotal) {
                console.log("Added Restart: ", newInvoiceItems[count])
                newItems.push(newInvoiceItems[count])
                count++
            }

			if (count == 8) {

                let invoiceList = $w('#agentInvoices')

                invoiceList.data = newItems;

				 console.log("Invoice Data Count is 8: ", invoiceList.data)

			}

		}

		let invoiceList = $w('#agentInvoices')

        invoiceList.data = newItems;
        console.log("Invoice Data: ", invoiceList.data)

		session.setItem("Clicked", "End")

	}
}


export function goBack_click(event) {
	let direction = "backward"
	loadMoreFunction(direction)
}

function uniqueId() {

    // desired length of Id
    var idStrLen = 32;
   
    var idStr = (Math.floor((Math.random() * 25)) + 10).toString(36) + "-";
    
    idStr += (new Date()).getTime().toString(36) + "-";
    
    do {
        idStr += (Math.floor((Math.random() * 35))).toString(36);
    } while (idStr.length < idStrLen);

    return (idStr);
}

export function runMemberCheck(){

	let subscriptionStatus = session.getItem("subscriptionStatus");
	
	let essentialMonthly = "price_1OSk4TGjvTpCU0nDMP9tc4Yi";
	let essentialAnnual = "price_1OSk71GjvTpCU0nDxg7qNTie";
	let boostMonthly = "price_1Ogal7GjvTpCU0nDrLO2Whvn";
	let boostAnnual = "price_1Ogam3GjvTpCU0nDcPIzyAR6";

	let essentialRole = "622d33e0-d047-4c12-9bcb-7b2355ce414f";
	let boostRole = "4f0115cb-c0b6-481d-804b-b83c36c911a3"

	let findmatchEssentialMonthly = subscriptionCheck.find(item=> item === essentialMonthly)
	let findmatchEssentialAnnual = subscriptionCheck.find(item=> item=== essentialAnnual)
	let findmatchBoostMonthly = subscriptionCheck.find(item=> item === boostMonthly)
	let findmatchBoostAnnual = subscriptionCheck.find(item=> item === boostAnnual)

	let isBoostMember = roleIds.find(item=> item === boostRole)
	let isEssentialMember = roleIds.find(item=> item === essentialRole)


	if(subscriptionCheck.length > 0 && subscriptionStatus == "ACTIVE"){ //User Shows Active and has Current Subscriptions

		

	}

	if(subscriptionCheck.length < 1 && subscriptionStatus == "ACTIVE"){ //User Shows Active and has No Current Subscriptions

	}

}

export function getSubscriptions(){
	let cus = session.getItem("cus")

	retrieveSubscription(cus, apiKeySk)
			.then( (subscriptions) => {
				
					console.log("Stripe Subscriptions:", subscriptions);
					let allItems = subscriptions.data

					if(allItems.length == undefined || allItems.length < 1){
						$w("#box488").collapse()
					}

					let subscriptionData = [];
					let listItems = [];

					let agentSubscriptions = $w("#agentSubscription");
					let susbcriptionsList = $w("#subscriptionsList");

			
			let totalSubscriptionAmount = 0;
			
			allItems.forEach(subscription => {

				//Billing Update 021624 0149
				console.log("Billing Update")
				

				if (subscription.plan == null){


                    let jointItems = subscription.items.data; //price_xx matches stripeSubscriptions database for multi-purchased items
					

                    jointItems.forEach(jointSubscription => {

                    let planId = jointSubscription.plan.id;
					console.log("Joint Subscription Plan ID", planId) //--HERE--//
					
					totalSubscriptionAmount = totalSubscriptionAmount + jointSubscription.plan.amount
					let jointstatus = jointSubscription.status; //active
					let jointprice = "$" + ((jointSubscription.plan.amount) / 100).toString();
					let jointinterval = jointSubscription.plan.interval; //month or year

					console.log("Joint Subscription Plan ID + Data", planId, jointprice, jointinterval) //--HERE--//

					wixData.query('stripeSubscriptions').eq('apiId', planId).find().then((planResults) => {

						console.log(
							"Results: ", planResults
						)

						var planLogoImage = planResults.items[0].logo
						var planName = planResults.items[0].title

			

						let newSubscription = {
								"_id": uniqueId(),
								"planId": jointSubscription.plan.id,
								"status": jointSubscription.status,
								"price": "$" + ((jointSubscription.plan.amount) / 100).toString(),
								"interval": jointSubscription.plan.interval,
								"subscription": jointSubscription.subscription,
								"planName": planName,
								"planLogoImage": planLogoImage

								}

								subscriptionData.push(newSubscription);
								listItems.push(newSubscription);
								subscriptionCheck.push(jointSubscription.plan.id);
								console.log("Subscription Check: ", subscriptionCheck)

								$w("#agentSubscription").data = subscriptionData;

								
								let firstData = {
									"_id": "0001",
								"planId": "blank",
								"price": "SUBTOTAL",

								}
								
								
								console.log("Subscription Data:", subscriptionData)
								
								let findmatch = listItems.find(item=> item._id === "0001")
											
								if(findmatch){
									console.log("First Data Already Pushed")
									$w("#subscriptionsList").data = [];
									$w("#subscriptionsList").data = listItems;
									$w("#subscriptionsBox").expand();
									
									console.log("List Items:", listItems)
								} else {
									console.log("First Data Pushed")
									listItems.unshift(firstData);
									$w("#subscriptionsList").data = [];
									$w("#subscriptionsList").data = listItems;
									$w("#subscriptionsBox").expand();
									console.log("List Items:", listItems)
								}


						agentSubscriptions.onItemReady(($item, itemData) => {


						$item('#price').text = itemData.price;
						$item('#interval').text = "/" + itemData.interval
						
							$item('#planName').text = itemData.planName;

						

						if(itemData.planLogoImage != undefined){

							$item('#subscriptionImage').src = itemData.planLogoImage;
							$item('#subscriptionImage').expand()

						}


						})

						susbcriptionsList.onItemReady(($item, itemData) => {

							console.log("List Items On Ready:", listItems)

						$item('#listPrice').text = itemData.price;
						
						

						$w('#totalSubscriptionAmount').text = "$" + ((totalSubscriptionAmount) / 100).toString();

						console.log("PLAN NAME: ", itemData.planId)

						if(itemData.price == "SUBTOTAL"){
							$item('#subscriptionPlanName').text = "ITEMS";
						} else if(itemData.price !== "SUBTOTAL"){
							
							$item('#subscriptionPlanName').text = itemData.planName;

						}


						})



					})


					})

				}

				if (subscription.plan !== null){



				totalSubscriptionAmount = totalSubscriptionAmount + subscription.plan.amount

				//query card type
				
				let planId = subscription.plan.id; //price_xx matches stripeSubscriptions database
				let status = subscription.status; //active
				let price = "$" + ((subscription.plan.amount) / 100).toString();
				let interval = subscription.plan.interval; //month or year
				let subscriptionId = subscription.id;
				let customer = subscription.customer;
				console.log("Subscription interval: ", interval)
				console.log("Subscription Customer: ", customer)
				console.log("Subscription Id: ", subscriptionId)
				

				wixData.query('stripeSubscriptions').eq('apiId', planId).find().then((planResults) => {

									console.log(
										"Results: ", planResults
									)

									var planLogoImage = planResults.items[0].logo
									var planName = planResults.items[0].title

						

						let newSubscription = {
											"_id": uniqueId(),
											"planId": subscription.plan.id,
											"status": subscription.status,
											"price": "$" + ((subscription.plan.amount) / 100).toString(),
											"interval": subscription.plan.interval,
											"subscription": subscription.id,
											"planName": planName,
											"planLogoImage": planLogoImage

											}

											subscriptionData.push(newSubscription);
											listItems.push(newSubscription);
											subscriptionCheck.push(subscription.plan.id)
											console.log("Subscription Check: ", subscriptionCheck)

											$w("#agentSubscription").data = subscriptionData;



											
											let firstData = {
												"_id": "0001",
											"planId": "blank",
											"price": "SUBTOTAL",

											}
											
											
											console.log("Subscription Data:", subscriptionData)

											let findmatch = listItems.find(item=> item._id === "0001")

											if(findmatch){
											 console.log("First Data Already Pushed")
											 $w("#subscriptionsList").data = [];
											 $w("#subscriptionsList").data = listItems;
											console.log("List Items:", listItems)

											} else {
												console.log("First Data Pushed")
												listItems.unshift(firstData);
												$w("#subscriptionsList").data = [];
											$w("#subscriptionsList").data = listItems;
											console.log("List Items:", listItems)
											}
											
											
									

									agentSubscriptions.onItemReady(($item, itemData) => {

									$item('#price').text = itemData.price;
									$item('#interval').text = "/" + itemData.interval
									
										$item('#planName').text = itemData.planName;

									

									if(itemData.planLogoImage != undefined){

										$item('#subscriptionImage').src = itemData.planLogoImage;
										$item('#subscriptionImage').expand()

									}


									})

									susbcriptionsList.onItemReady(($item, itemData) => {

										console.log("List Items On Ready:", listItems)

									$item('#listPrice').text = itemData.price;
									
									
									
									$w('#totalSubscriptionAmount').text = "$" + ((totalSubscriptionAmount) / 100).toString();

									console.log("PLAN NAME: ", itemData.planId)

									if(itemData.price == "SUBTOTAL"){
										$item('#subscriptionPlanName').text = "ITEMS";
									} else if(itemData.price !== "SUBTOTAL"){
										
										$item('#subscriptionPlanName').text = itemData.planName;

									}


									})


				})

			}

				
				})		
					
					
			});
}



export function cancelSubscription_click(event) {

	let $item = $w.at(event.context);
	const itemId = event.context.itemId;
	const data = $w("#agentSubscription").data;
	const itemData = data.find((item) => item._id === itemId);


	console.log("Prep Subscriptions")
								session.setItem("stripePurpose", "Cancel");
								
								//toCancel.push(itemData.subscription);
								
								let totalSubscriptions = data.length;
								
								let count = 0;
								console.log("Update: ", totalSubscriptions, count)

								data.forEach(subscription => {
									console.log("Subscription Data All: ", data, itemData.subscription)
									count++

									let findMatch = data.find(item=> subscription.subscription === itemData.subscription) //Match in Subscriptions array where equals subscription ID of item clicked on
									let preventDuplicates = toCancel.find(item=> item.planId === subscription.planId) //Match in Cancelled array where equals pland ID of current item

									console.log("Update: ", totalSubscriptions, count)
									if(findMatch && !preventDuplicates){
										toCancel.push(subscription);
										console.log("Matched Subscription: ", subscription.subscription, subscription.planName, subscription.price)
									} else {

										console.log("Not Matched: ",subscription.subscription, subscription.planName, subscription.price)		

										}

										console.log("ThisSubscription: ", itemData.subscription)
									
									if(totalSubscriptions == count){
										wixWindow.openLightbox('Payment', toCancel)
									.then((data) => {

										let receivedData = data;

										console.log("Data Received: ", receivedData)

											getSubscriptions();

										
									});


									}
									

									
									
								});
								








}

export function updatePaymentMethod_click(event) {
	session.setItem("stripePurpose", "updateCard")
	wixWindow.openLightbox('Payment')
		.then((data) => {
			let receivedData = data.lightBoxSend1;
			console.log("Data Received: ", receivedData)

				if (receivedData === "Error") {

					//--Code TBD--//

				} else if (receivedData === "Success"){

					retrieveMethods();

				}

		})

}

export function retrieveMethods(){
	
	retrieveMethod(cus, apiKeySk)
	.then( (response) => {
        
			console.log("Stripe Methods:", response, response.data[0].id);
			let allItems = response.data
			//$w("#agentCards").data = allItems

			
			
			let cardData = [];

			let agentCards = $w("#agentCards");
			$w("#agentCards").data = [];
			
			let totalMethods = allItems.length;

			console.log("Total Methods", totalMethods)

			session.setItem("Methods", totalMethods)
			
				allItems.forEach(method => {

					console.log(
								"Method: ", method
							)


					//query card type
					let cardType = method.card.brand; //visa
					let cardExpMonth = method.card.exp_month;
					let cardExpYear = method.card.exp_year;
					let cardlast4 = method.card.last4;


						wixData.query('cardTypes').eq('title', cardType).find().then((cardResults) => {

							console.log(
								"Results: ", cardResults
							)

							var cardLogoImage = cardResults.items[0].logo
							

							let newCard = {
									"_id": unixCode(),
									"cardType": cardType,
									"cardExpMonth": cardExpMonth,
									"cardExpYear": cardExpYear,
									"cardlast4": cardlast4,
									"cardLogoImage": cardLogoImage,
									}

									cardData.push(newCard)

									$w("#agentCards").data = cardData
									$w("#agentCards").expand();

									console.log("Card Data: ", cardData)

									agentCards.onItemReady(($item, itemData) => {

									$item('#mainCardData').text = itemData.cardType.toUpperCase() + " ending in " + itemData.cardlast4.toString();
									$item('#expiration').text = "Expires " + itemData.cardExpMonth.toString() + "/" + itemData.cardExpYear.toString()
									$item('#cardImage').src = itemData.cardLogoImage;


									})

						})

				

					
				})	

				
			
	});
}