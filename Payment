import wixUsers from 'wix-users';
import wixData from 'wix-data';
import wixLocation from 'wix-location';
import {session} from 'wix-storage';
import wixWindow from 'wix-window';
import {stripeToken} from 'public/stripe.js';
import {createCustomer, createSubscription, createMultipleSubscriptions, createSubscriptionNewMethod,createPurchase, createOrder, finalizeOrder, payIntentComplete, payOrder, retrieveMethod, createMethod,cancelSubscription,updateCard,updateCustomer} from 'backend/stripeProcessor.jsw';
import { currentMember } from 'wix-members';
import { assignEssential, assignBoost } from 'backend/members.jsw';

let mode = "test"; //---set to "live" for live settings, set to "test" for test settings---//
let stripePurpose
let apiKeyPk
let apiKeySk
let agentSubscriptions = null;
agentSubscriptions = [];
let customerId
let memberId 

let context = wixWindow.lightbox.getContext();
var email 
var planId
let subscriptionCheckoutData = [];

$w.onReady(async function () {
console.log("All states: ", $w("#stripePayment").states);

const member = await currentMember.getMember()

if (member) {
		memberId = member._id;
		console.log("Member Found", memberId)
} 

//-------set below for live or test Stripe----//

let stripeMode = "test";   //value is "test" or "live"

if(stripeMode == "test"){

    apiKeyPk = "stripeTestPk";
    apiKeySk = "stripeTestSk";


} else if(stripeMode == "live"){

    apiKeyPk = "stripeLivePk";
    apiKeySk = "stripeLiveSk";

}

//--------------------end--------------------//



    email = await wixUsers.currentUser.getEmail();

	wixData.query('Team').eq('email', email).find().then((res) => {
        var itemId = res.items[0]._id
        session.setItem("id", itemId)
        session.setItem("userName", res.items[0].name)
		if(res.items[0].customerId !== undefined || res.items[0].customerId !== ""){

			customerId = res.items[0].customerId

			retrieveMethods();

		}
		
		//let isArray = (res.items[0].subscriptionId).isArray
		let isArray = Array.isArray(res.items[0].subscriptionId)
		console.log("Is Array: ", isArray)
		console.log("Customer Id: ", customerId)
	
		if((res.items[0].subscriptionId !== "" || res.items[0].subscriptionId !== undefined) && isArray){

			let agentSubscriptionsFound = res.items[0].subscriptionId

			agentSubscriptionsFound.forEach(subscription => {

				if( subscription == "FREE"){

					console.log("Free found")
					$w('#stripePayment').changeState("Main");

				} else {

					agentSubscriptions.push(subscription)

				}

				
				
			});

		} else {

			if((res.items[0].subscriptionId !== "" || res.items[0].subscriptionId !== undefined) &&  !isArray){

				console.log("Single Subscription Found to Push:", res.items[0].subscriptionId)

				if(res.items[0].subscriptionId == "FREE"){

					console.log("Free found")
					$w('#stripePayment').changeState("Main");

				} else {

					agentSubscriptions.push(res.items[0].subscriptionId)

				}

				

			}

		}

    })

    console.log("E-mail confirmation: ", email)
    stripePurpose = session.getItem("stripePurpose");

    if(stripePurpose == "Subscribe"){

		
		let totalMethods = session.getItem("Methods")

		if(totalMethods !== null || totalMethods !== "" || totalMethods !== undefined){

			let total = Number(totalMethods);
			console.log("Total Methods", total)

			if(total > 0){
				$w('#stripePayment').changeState("Subscribe");
			} else {
				$w('#stripePayment').changeState("Main");
			}

		} else {

			$w('#stripePayment').changeState("Main");
		}



    }

	if(stripePurpose == "mySubscriptions"){

       //CHECK ON SUBMIT FOR STRIPE PURPOSE INVOICE FUNCTIONS

		let totalMethods = session.getItem("Methods")

		

        
        //let planSelection = context.planSelection
		let subscriptions = context
        console.log("Plan Details: ", context)
		console.log("First Plan Details: ", context[0].planSelection)

		if(subscriptions.length < 2){

			console.log("Single Plan Details: ", context[0].planSelection)

			

					if(context[0].duration !== undefined){

						console.log("Duration: ", context[0].duration)

						wixData.query("stripeSubscriptions")
							.eq("title", context[0].planSelection)      
							.eq("type", mode)  
							.eq("duration", context[0].duration) 
							.find() 
							.then((results) => { 

								let apiId = results.items[0].apiId
								planId = apiId
								let price = {
									price: apiId
								}
								subscriptionCheckoutData.push(price);
								console.log("Found ID", apiId)
								console.log("Found plan", results)
								console.log("Plan Logged:", planId)

							})


					} else {

						wixData.query("stripeSubscriptions")
							.eq("title", context[0].planSelection)      
							.eq("type", mode)  
							.find() 
							.then((results) => { 

								let apiId = results.items[0].apiId
								planId = apiId
								let price = {
									price: apiId
								}
								subscriptionCheckoutData.push(price);
								console.log("Found ID", apiId)
								console.log("Found plan", results)
								console.log("Plan Logged:", planId)

							})


					}


		} else {

			let count = 0;
			let total = subscriptions.length;

			subscriptions.forEach(subscription => {

				count++

				console.log("This Plan Details: ", subscription.planSelection)

				

					if(subscription.duration !== undefined){

						console.log("Duration found: ", subscription.duration)

						wixData.query("stripeSubscriptions")
							.eq("title", subscription.planSelection)      
							.eq("type", mode)  
							.eq("duration", subscription.duration) 
							.find() 
							.then((results) => { 

								let apiId = results.items[0].apiId
								let price = {
									price: apiId
								}
								subscriptionCheckoutData.push(price);

								console.log("Found ID", apiId)
								console.log("Found plan", results)
								console.log("Subscription Plans: ", subscriptionCheckoutData)

							})

					} else {

						console.log("No Duration")

						wixData.query("stripeSubscriptions")
							.eq("title", subscription.planSelection)      
							.eq("type", mode)  
							.find() 
							.then((results) => { 

								let apiId = results.items[0].apiId
								let price = {
									price: apiId
								}
								subscriptionCheckoutData.push(price);

								console.log("Found ID", apiId)
								console.log("Found plan", results)
								console.log("Subscription Plans: ", subscriptionCheckoutData)

							})

					}

				if(count == total){


					console.log("All Plans Loaded: ", subscriptionCheckoutData)

				}
				
			});
		}

        


    }

	if(stripePurpose == "Cancel"){
        $w('#stripePayment').changeState("Cancel");
		console.log("Received: ", context)
		$w("#subscriptionsList").data = [];
		$w("#subscriptionsList").data = context;
		let susbcriptionsList = $w("#subscriptionsList");
		susbcriptionsList.onItemReady(($item, itemData) => {

			$item('#subscriptionPlanName').text = itemData.planName;
			$item('#listPrice').text = itemData.price;

		})

	}

	if(stripePurpose == "updateCard"){
		$w('#stripePayment').changeState("Main");

	}


    

});

export function toCard_click(event) {

        let cardName = $w("#cardName").value;
        let zip = $w("#zip").value;
        let street = $w("#street").value;
        let city = $w("#city").value;
        let state = $w("#state").value;
		

	if($w("#cardName").value.length > 0 && $w("#zip").value.length > 4 && $w("#street").value.length > 0  && $w("#city").value.length > 0 && $w("#state").valid){
        $w('#stripePayment').changeState("Card");
    }
}

export function cardNumber_keyPress(event) {
	if ($w('#cardNumber').value.length === 16) {
	 $w("#mm").focus();
	}
}

export function mm_keyPress(event) {
	if ($w('#mm').value.length === 2) {
	 $w("#yyyy").focus();
	}
}
export function yyyy_keyPress(event) {
	if ($w('#yyyy').value.length === 4) {
	 $w("#cvc").focus();
	 $w("#errorCard").text = "3-digit CVC is printed on the signature panel on the back of the card; for American Express cards it is the 4-digit number above the card number."
	 $w("#errorCard").show();
	
	}
}

export function cvc_keyPress(event) {
	if ($w('#cvc').value.length === 2) {
	$w("#errorCard").show();
	$w("#errorCard").text = ""
	 $w("#errorCard").hide();
	  $w("#errorCard").text = "Error"
	} 
}


export function submit_click(event) {

	if(stripePurpose == "Subscribe" || stripePurpose == "mySubscriptions" ){

        subscribeMain()

	}

	if(stripePurpose == "updateCard"){

		createCardToken()

	}

}

//-------------------------------------------------------Main Subscription-------------------------------------------------------//

export function subscribeMain(){


    //$w('#submitLoader').show();
	$w('#submit').disable();
	$w('#processorText').text = "Subscribing...";
	$w('#processorText').expand();
	setTimeout(()=>{
		createCardToken();
	},200)

}

//-------------------------------------------------------Encode & Create Card Token-------------------------------------------------------//

function createCardToken() {
	console.log("Create card token");
	$w("#processorText").text = 'Validating card details';
	let name = $w("#cardName").value;
	
	
	let signupName = session.getItem("userName");
	let card = $w('#cardNumber').value;
	let mm = $w("#mm").value;
	let yyyy = $w("#yyyy").value;
	let cvc = $w("#cvc").value;
	let line1 = $w("#street").value;
	let city = $w("#city").value;
	let state = $w("#state").value;
	let zip = $w("#zip").value;
	createToken(name, card, mm, yyyy, cvc, line1, city, state, zip)
	.then( (response) => {
		console.log("Token Response", response)
		if(response.id !== undefined) {
			let token = response.id;
			let lastFour = response.card.last4;
			let brand = response.card.brand;
			let cardId = response.card.id;
			let method = response.card.id;
		

			//-------UPDATED WITH CUSTOMER ID FROM DATABASE-----//
			if ((customerId === undefined || customerId === "") && stripePurpose !== "updateCard"){

				console.log("Customer Id undefined: ", customerId) //Does not exist in system, create new customer
				customerCreation(token, lastFour, brand, cardId,signupName);
				

			} else if ((customerId !== undefined || customerId !== "") && stripePurpose !== "updateCard") {

				console.log("Customer Id Found: ", customerId, method) //Exists in system, connect in Stripe to existing customer
				$w('#processorText').text = "Confirming Details...";
				subscription(customerId, lastFour, brand, method, token);

			}

			if(stripePurpose == "updateCard"){
				$w('#submit').disable();
				$w('#submit').label = "Updating"
				$w('#processorText').text = "Confirming Details...";
				$w('#processorText').expand();

				updateCard(response.id, apiKeySk, customerId)
				.then( (response) => {
						$w('#processorText').text = "Applying Updates...";
						let id = response.id;

					updateCustomer(id, apiKeySk, customerId)
					.then( (customerResponse) => {

						let cardUpdate = customerResponse.created;

						if (cardUpdate !== null || cardUpdate !== ""){

							$w('#processorText').text = "Default Card Updated";

							let thisId = session.getItem("id")

							wixData.get("Team", thisId)
								.then((toUpdate) => {

									$w('#processorText').text = "Updating Profile...";

									
									toUpdate.lastFour = String(lastFour);
									toUpdate.cardType = brand;

									console.log(toUpdate);

									wixData.update('Team', toUpdate).then((res) => {
										console.log('updated');
										setTimeout(() => {

                            	$w('#processorText').text = "Taking to Billing...";

                        		}, 2000);

										setTimeout(() => {

                            	wixWindow.lightbox.close( {
								"lightBoxSend1": "Success",
									} );

                        		}, 4000);
										
										})

							 

							})

						}

				
				})
				
				})

			}
			
		} else {
            $w('#processorText').text = "Token Error: Customer Not Subscribed";
			$w('#processorText').expand();
			console.log("Error: ", response)
			$w("#submit").enable();
		}
	});
}

function createToken(name, card, mm, yyyy, cvc, line1, city, state, zip) {

    $w('#processorText').text = "Creating Subscription...";
	console.log("Token Begin");
	let cardObject = {
		"name": name,
		"number": card,
		"exp_month": mm,
		"exp_year": yyyy,
		"cvc": cvc,
		"address_line1": line1,
		"address_city": city,
		"address_state": state,
		"address_zip": zip,
	};
	return stripeToken(cardObject, apiKeyPk)
	.then( (response) => {
		return response;
	});
}

//-----------------------------------------------------------------Create Customer-----------------------------------------------------------------//

async function customerCreation(token, lastFour, brand, cardId,agentName) {

	createCustomer(token, email, apiKeySk, agentName)
	.then( (response) => {
        $w('#processorText').text = "Confirming Details...";
		if(response.id !== undefined) {
			console.log("Create customer");
			let cus = response.id;

			subscription(cus, lastFour, brand);

						
		} else {
			$w('#processorText').text = "Customer Error: Customer Not Subscribed";
			$w('#processorText').expand();
			console.log("Error: ", response)
			$w("#submit").enable();
		}
	});
}

//-----------------------------------------------------------------Subscribe-----------------------------------------------------------------//

async function subscription(cus, lastFour, brand, method, token) {

	console.log("Method: ", method)
	let plan = [];
	let data = {
		plan: planId,
		quantity: 1
	};
	await plan.push(data);

	let defaultMethod = session.getItem("Default")

	if(stripePurpose == "Subscribe"){
		console.log("Default", session.getItem("Default"))
		if(defaultMethod == "No"){
			console.log("New Method No", stripePurpose)
			$w('#cardDetailsSubtext').text = "Enter your card details below. This will be your new default payment method for all subscriptions.";
			$w("#newCard").disable();
			$w("#defaultCard").collapse();
			$w("#newCard").label = "Subscribing..."

			updateCard(token, apiKeySk, customerId)
				.then( (response) => {
						
						let id = response.id;

					updateCustomer(id, apiKeySk, customerId)
					.then( (customerResponse) => {

						createSubscriptionNewMethod(cus, plan, apiKeySk, method)

							.then( (response) => {
							if(response.id !== undefined && response.status === 'active') {
								let subStatus = 'ACTIVE';
								$w('#processorText').text = "Finalizing Subscription...";
								signUpMember(response, cus, lastFour, brand, subStatus);
							} else if(response.id !== undefined && response.status !== 'active') {
								let subStatus = 'PENDING';
								//signUpMember(response, cus, lastFour, brand, subStatus);	
								$w('#processorText').text = "Subscription Error: Customer Not Subscribed";
								$w('#processorText').expand();
								console.log("Error: ", response)
								$w("#submit").enable();
								$w("#defaultCard").enable();
							} else {
								$w('#processorText').text = "Subscription Error: Customer Not Subscribed";
								$w('#processorText').expand();
								console.log("Error: ", response)
								$w("#submit").enable();
								$w("#defaultCard").enable();
							}
						});


					})

				})
			

		}

		if(defaultMethod == "Yes" || defaultMethod == undefined || defaultMethod == ""){
			$w("#newCard").disable();
			$w("#defaultCard").collapse();
			console.log("Default", stripePurpose)
			$w("#newCard").label = "Subscribing..."
			$w('#cardDetailsSubtext').text = "Enter your card details below.";

			createSubscription(cus, plan, apiKeySk)
		.then( (response) => {
			console.log("General Subscription Method")
			if(response.id !== undefined && response.status === 'active') {
				let subStatus = 'ACTIVE';
				$w('#processorText').text = "Finalizing Subscription...";
				$w('#defaultProcessorText').text = "Finalizing Subscription...";
				$w('#defaultProcessorText').expand();
				$w('#processorText').expand();
				signUpMember(response, cus, lastFour, brand, subStatus);
			} else if(response.id !== undefined && response.status !== 'active') {
				let subStatus = 'PENDING';
				//signUpMember(response, cus, lastFour, brand, subStatus);	
				$w('#processorText').text = "Subscription Error: Customer Not Subscribed";
				$w('#defaultProcessorText').text = "Subscription Error: Customer Not Subscribed";
				$w('#processorText').expand();
				$w('#defaultProcessorText').expand();
				console.log("Error: ", response)
				$w("#submit").enable();
			} else {
				$w('#processorText').text = "Subscription Error: Customer Not Subscribed";
				$w('#defaultProcessorText').text = "Subscription Error: Customer Not Subscribed";
				$w('#processorText').expand();
				$w('#defaultProcessorText').expand();
				console.log("Error: ", response)
				$w("#submit").enable();
			}
		});

		}

		
        		
    }

	if(stripePurpose == "mySubscriptions"){
		$w("#submit").disable();

		if(defaultMethod == "No"){
			console.log("My Subscriptions No", stripePurpose)

			$w('#cardDetailsSubtext').text = "Enter your card details below. This will be your new default payment method for all subscriptions.";

			updateCard(token, apiKeySk, customerId)
				.then( (response) => {
						
						let id = response.id;

					updateCustomer(id, apiKeySk, customerId)
					.then( (customerResponse) => {

						createMultipleSubscriptions(cus, subscriptionCheckoutData, apiKeySk, method)

							.then( (response) => {
								if(response.id !== undefined && response.status === 'active') {
									agentSubscriptions.push(response.id)
									console.log("Subscriptions Updated: ", agentSubscriptions)
									let subStatus = 'ACTIVE';
									$w('#processorText').text = "Finalizing Subscription...";
									signUpMultiMember(response, cus, lastFour, brand, subStatus);
								} else if(response.id !== undefined && response.status !== 'active') {
									let subStatus = 'PENDING';
									//signUpMember(response, cus, lastFour, brand, subStatus);	
									$w('#processorText').text = "Subscription Error: Customer Not Subscribed";
									$w('#processorText').expand();
									console.log("Error: ", response)
									$w("#submit").enable();
								} else {
									$w('#processorText').text = "Subscription Error: Customer Not Subscribed";
									$w('#processorText').expand();
									console.log("Error: ", response)
									$w("#submit").enable();
								}
							});


					})

				})

		}

		if(defaultMethod == "Yes" || defaultMethod == undefined || defaultMethod == ""){
			console.log("My Subscriptions Default", stripePurpose)
			$w('#cardDetailsSubtext').text = "Enter your card details below.";

			createMultipleSubscriptions(cus, subscriptionCheckoutData, apiKeySk)
			.then( (response) => {
				if(response.id !== undefined && response.status === 'active') {
					agentSubscriptions.push(response.id)
					console.log("Subscriptions Updated: ", agentSubscriptions)
					let subStatus = 'ACTIVE';
					$w('#processorText').text = "Finalizing Subscription...";
					signUpMultiMember(response, cus, lastFour, brand, subStatus);
				} else if(response.id !== undefined && response.status !== 'active') {
					let subStatus = 'PENDING';
					//signUpMember(response, cus, lastFour, brand, subStatus);	
					$w('#processorText').text = "Subscription Error: Customer Not Subscribed";
					$w('#processorText').expand();
					console.log("Error: ", response)
					$w("#submit").enable();
				} else {
					$w('#processorText').text = "Subscription Error: Customer Not Subscribed";
					$w('#processorText').expand();
					console.log("Error: ", response)
					$w("#submit").enable();
				}
			});

		}
        		
    }

	


}



async function signUpMember(response, cus, lastFour, brand, subStatus) {


            let thisId = session.getItem("id")

            wixData.get("Team", thisId)
                .then((toUpdate) => {
                    $w('#processorText').text = "Updating Dashboard...";
					$w('#defaultProcessorText').text = "Updating Dashboard...";

                    toUpdate.customerId = cus;
                    toUpdate.subscriptionId = response.id;
                    toUpdate.lastFour = String(lastFour);
                    toUpdate.cardType = brand;
                    toUpdate.subscriptionStatus = subStatus;

                    console.log(toUpdate);

                    wixData.update('Team', toUpdate).then((res) => {
                        console.log('updated');
                        $w("#submit").label = "Subscribed!";
						$w("#newCard").label = "Subscribed!";

						checkSubscriptionsPermissions().then((res) => {

							// After 2 seconds, change the state of the multistate box to 'licensing'
                        setTimeout(() => {
                            $w('#processorText').text = "Taking to Dashboard...";
							$w('#defaultProcessorText').text = "Taking to Dashboard...";

                        }, 1000);

                        setTimeout(() => {

                            wixWindow.lightbox.close( {
								"lightBoxSend1": "Success",
							} );

                        }, 2000);


						})

                        
                    })

                })



}

async function signUpMultiMember(response, cus, lastFour, brand, subStatus) {


            let thisId = session.getItem("id")

            wixData.get("Team", thisId)
                .then((toUpdate) => {
                    $w('#processorText').text = "Updating Dashboard...";

                    toUpdate.customerId = cus;
                    toUpdate.subscriptionId = agentSubscriptions;
                    toUpdate.lastFour = String(lastFour);
                    toUpdate.cardType = brand;
                    toUpdate.subscriptionStatus = subStatus;

                    console.log(toUpdate);

                    wixData.update('Team', toUpdate).then((res) => {
                        console.log('updated');
                        $w("#submit").label = "Subscribed!";

						checkSubscriptionsPermissions().then((res) => {

							// After 2 seconds, change the state of the multistate box to 'licensing'
                        setTimeout(() => {
                            $w('#processorText').text = "Taking to Dashboard...";

                        }, 1000);

                        setTimeout(() => {

                            wixWindow.lightbox.close( {
								"lightBoxSend1": "Success",
							} );

                        }, 2000);


						})

                        
                    })

                })



}

async function checkSubscriptionsPermissions(){

	let essentialMonthly = "price_1OSk4TGjvTpCU0nDMP9tc4Yi";
	let essentialAnnual = "price_1OSk71GjvTpCU0nDxg7qNTie";
	let boostMonthly = "price_1Ogal7GjvTpCU0nDrLO2Whvn";
	let boostAnnual = "price_1Ogam3GjvTpCU0nDcPIzyAR6";

	let findmatchEssentialMonthly = subscriptionCheckoutData.find(item=> item.price === essentialMonthly)
	let findmatchEssentialAnnual = subscriptionCheckoutData.find(item=> item.price === essentialAnnual)
	let findmatchBoostMonthly = subscriptionCheckoutData.find(item=> item.price === boostMonthly)
	let findmatchBoostAnnual = subscriptionCheckoutData.find(item=> item.price === boostAnnual)

	console.log("Subscriptions Permissions Check and Find Match", findmatchBoostAnnual, findmatchBoostMonthly, findmatchEssentialAnnual, findmatchEssentialMonthly)

	if(subscriptionCheckoutData.length > 0){

		

		if(findmatchEssentialMonthly || findmatchEssentialAnnual){

			assignEssential(memberId).then((result) => {
				console.log("Assigned Essential:", result)
			})

		}

		if(findmatchBoostMonthly || findmatchBoostAnnual){

			assignBoost(memberId).then((result) => {
				console.log("Assigned Boost:", result)
			})

		}


	}

	if(planId != undefined){

		if(planId == essentialMonthly || planId == essentialAnnual){

			assignEssential(memberId).then((result) => {
				console.log("Assigned Essential:", result)
			})

		}

		if(planId == boostMonthly || planId == boostAnnual){

			assignBoost(memberId).then((result) => {
				console.log("Assigned Boost:", result)
			})

		}


	}




}

export function cancelSubscription_click(event) {
	$w("#cancelError").collapse()
	$w("#cancelError").collapse()
	$w("#cancelSubscription").disable();
	console.log("Subscription to Cancel: ", context[0].subscription)
								setTimeout(()=>{
									$w("#cancelProcessor").text = "Cancelling Subscription..."
									$w("#cancelProcessor").expand()
									
												
											},3000)
	cancelSubscription(context[0].subscription, apiKeySk)
									.then( (response) => {

										if(response.status == "canceled"){
											$w("#cancelProcessor").text = "Completed"
											$w("#cancelSubscription").label = "Subscription Canceled!"
											setTimeout(()=>{
												$w("#cancelProcessor").text = "You may close this window."
											},3000)

											

										} else {
											$w("#cancelProcessor").text = "Please contact us for assistance."
											$w("#cancelError").text = "Error cancelling subscription"
											$w("#cancelSubscription").enable();
											$w("#cancelError").expand()
										}
										
											console.log("Stripe Subscription Cancelled Status:", response);

											   //--log process--//
												let logResults = {
													"type": "Stripe Log",
													"log": "Cancelled Subscription", response
													};

													wixData.insert("devLog", logResults)
													.then( (results) => {
													let item = results; //see item below
													
													} )
													.catch( (err) => {
													let errorMsg = err;


														//--log process--//
															let logResults = {
																"type": "Stripe Log",
																"log": "Cancel Subscription Error", errorMsg
																};

																wixData.insert("devLog", logResults)
																.then( (results) => {
																let item = results; //see item below
																
																} )
															

                                  				//--end log process--//
											
												})
								
								})
}

export function defaultCard_click(event) {
	session.setItem("Default","Yes")
	$w("#defaultCard").disable();
	subscription(customerId);
}

export function newCard_click(event) {

	$w('#stripePayment').changeState("Main");
	session.setItem("Default","No")
	console.log("Default Click: ", session.getItem("Default"), stripePurpose)
	$w('#cardDetailsSubtext').text = "Enter your card details below. This will be your new default payment method for all subscriptions.";



        let plan = context.plan;
        let planSelection = context.planSelection
        console.log("Plan Details: ", plan, planSelection)

        wixData.query("stripeSubscriptions")
                    .eq("title", planSelection)  
                    .eq("duration", plan)     
                    .eq("type", mode)  
                    .find() 
                    .then((results) => { 

                         let apiId = results.items[0].apiId
                         planId = apiId
                         console.log("Found ID", apiId)
                         console.log("Found plan", results)
                         console.log("Plan Logged:", planId)

                    })

	
	
}

export function retrieveMethods(){
	
	retrieveMethod(customerId, apiKeySk)
	.then( (response) => {
        
			console.log("Stripe Methods:", response, response.data[0].id);
			let allItems = response.data
			//$w("#agentCards").data = allItems

			
			
			let cardData = [];
			let totalMethods = allItems.length;

			console.log("Total Methods", totalMethods)

			session.setItem("Methods", totalMethods)

			if(totalMethods !== null || totalMethods !== "" || totalMethods !== undefined){

			let total = Number(totalMethods);
			console.log("Total Payment Methods", total)


		 if(stripePurpose == "Subscribe" || stripePurpose == "mySubscriptions"){
			
			if(total > 0){
				$w('#stripePayment').changeState("Subscribe");
			} else {
				$w('#stripePayment').changeState("Main");
			}


			} 

		} else {
				$w('#stripePayment').changeState("Main");
			}
				

				
			
	});
}